<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Stanford CS131 Computer Vision:Foundations and Applications hw_1</title>
      <link href="/2020/03/11/stanford-cs131-computer-vision-foundations-and-applications-hw-1/"/>
      <url>/2020/03/11/stanford-cs131-computer-vision-foundations-and-applications-hw-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Homework-1"><a href="#Homework-1" class="headerlink" title="Homework 1"></a><strong>Homework 1</strong></h2><p>本次作业主要的内容是学习使用卷积运算、互相关运算、线性滤波器</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Setup</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> time <span class="token keyword">import</span> time<span class="token keyword">from</span> skimage <span class="token keyword">import</span> io<span class="token operator">%</span>matplotlib inlineplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># set default size of plots</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'image.interpolation'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'nearest'</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'image.cmap'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'gray'</span><span class="token comment" spellcheck="true"># for auto-reloading extenrnal modules</span><span class="token operator">%</span>load_ext autoreload<span class="token operator">%</span>autoreload <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Part-1-Convolutions"><a href="#Part-1-Convolutions" class="headerlink" title="Part 1: Convolutions"></a><strong>Part 1: Convolutions</strong></h2><h3 id="1-1-Commutative-Property"><a href="#1-1-Commutative-Property" class="headerlink" title="1.1 Commutative Property"></a><strong>1.1 Commutative Property</strong></h3><p>卷积运算定义如下：<br>$$(𝑓∗ℎ)[𝑚,𝑛]=\sum_{i=-\infty}^{\infty}\sum_{j=-\infty}^{\infty}𝑓[𝑖,𝑗]⋅ℎ[𝑚−𝑖,𝑛−𝑗]$$<br>证明卷积运算的交换律:<br>$$(𝑓∗ℎ)[𝑚,𝑛]=(h∗f)[𝑚,𝑛]$$<br>证明如下：<br>$$<br>\begin{align}<br>(𝑓∗ℎ)[𝑚,𝑛]&amp;=\sum_{i=-\infty}^{\infty}\sum_{j=-\infty}^{\infty}𝑓[𝑖,𝑗]⋅ℎ[𝑚−𝑖,𝑛−𝑗]\\<br>&amp;=\sum_{i=-\infty}^{\infty}\sum_{j=-\infty}^{\infty}𝑓[m-x,n-y]⋅ℎ[x,y]\\<br>&amp;=\sum_{i=-\infty}^{\infty}\sum_{j=-\infty}^{\infty}ℎ[x,y]⋅𝑓[m-x,n-y]\\<br>&amp;=(h*f)[m,n]\\<br>\end{align}<br>$$</p><h3 id="1-2-Linear-and-Shift-Invariance"><a href="#1-2-Linear-and-Shift-Invariance" class="headerlink" title="1.2 Linear and Shift Invariance"></a><strong>1.2 Linear and Shift Invariance</strong></h3><p>首先说明在此课程中，$S$指线性系统运算符，讲输出$g[m,n]$映射到输入$f[m,n]$,以下几种写法的意义是相同的：<br>$$<br>\begin{align}<br>&amp;S[g]=f\\<br>&amp;S{f[m,n]}=g[m,n]\\<br>&amp;f[m,n]\stackrel{S}{\rightarrow}g[m,n]\\<br>\end{align}<br>$$<br>证明：<br>卷积运算的线性平移不变性<br>$$<br>\begin{align}<br>&amp;S[a·f_1+b·f_2]=a·S[f_1]+b·S[f_2]\\<br>&amp;if  𝑓[𝑚,𝑛]\stackrel{S}{\rightarrow}𝑔[𝑚,𝑛] then  𝑓[𝑚−𝑚0,𝑛−𝑛0]\stackrel{S}{\rightarrow}𝑔[𝑚−𝑚0,𝑛−𝑛0]\\<br>\end{align}<br>$$<br>证明如下：<br>$$<br>\begin{align}<br>S[a·f_1+b·f_2]&amp;=[a·f_1+b·f_2]*h[m,n]\\<br>&amp;=\sum_{i=-\infty}^{\infty}\sum_{j=-\infty}^{\infty}(a·f_1[i,j]+b·f_2[i,j])·h[m-i,n-j]\\<br>&amp;=\sum_{i=-\infty}^{\infty}\sum_{j=-\infty}^{\infty}(a·f_1[i,j]·h[m-i,n-j]+b·f_2[i,j]·h[m-i,n-j])\\<br>&amp;=a·\sum_{i=-\infty}^{\infty}\sum_{j=-\infty}^{\infty}(f_1[i,j]·h[m-i,n-j]) + b·\sum_{i=-\infty}^{\infty}\sum_{j=-\infty}^{\infty}(f_2[i,j]·h[m-i,n-j])\\<br>&amp;=a·(f_1×h)+b·(f_2×h)\\<br>&amp;=a·S[f_1]+b·S[f_2]\\<br>\end{align}<br>$$<br>证明平移不变性日后再补</p><h3 id="1-3-Implementation"><a href="#1-3-Implementation" class="headerlink" title="1.3 Implementation"></a><strong>1.3 Implementation</strong></h3><p>首先加载需要的图片   </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Open image as grayscale</span>img <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'dog.jpg'</span><span class="token punctuation">,</span> as_grey<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Show image</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Isn't he cute?"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后实现filter.py当中的conv_nested，思路是用四层循环按照卷积定义计算</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">conv_nested</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A naive implementation of convolution filter.    This is a naive implementation of convolution using 4 nested for-loops.    This function computes convolution of an image with a kernel and outputs    the result that has the same shape as the input image.    Args:        image: numpy array of shape (Hi, Wi).        kernel: numpy array of shape (Hk, Wk).    Returns:        out: numpy array of shape (Hi, Wi).    """</span>    kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>kernel<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>kernel<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    Hi<span class="token punctuation">,</span> Wi <span class="token operator">=</span> image<span class="token punctuation">.</span>shape    Hk<span class="token punctuation">,</span> Wk <span class="token operator">=</span> kernel<span class="token punctuation">.</span>shape    out <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>Hi<span class="token punctuation">,</span> Wi<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Hi<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Wi<span class="token punctuation">)</span><span class="token punctuation">:</span>            sum <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> ki <span class="token keyword">in</span> range<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token operator">-</span>Hk<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>Hk<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> kj <span class="token keyword">in</span> range<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token operator">-</span>Wk<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>Wk<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> i <span class="token operator">+</span> ki <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> j <span class="token operator">+</span> kj <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> i <span class="token operator">+</span> ki <span class="token operator">>=</span> Hi <span class="token operator">or</span> j <span class="token operator">+</span> kj <span class="token operator">>=</span> Wi<span class="token punctuation">:</span>                        sum <span class="token operator">+=</span> <span class="token number">0</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        sum <span class="token operator">+=</span> image<span class="token punctuation">[</span>i <span class="token operator">+</span> ki<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> kj<span class="token punctuation">]</span> <span class="token operator">*</span> kernel<span class="token punctuation">[</span>ki <span class="token operator">+</span> int<span class="token punctuation">(</span>Hk<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>kj <span class="token operator">+</span> int<span class="token punctuation">(</span>Wk<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            out<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行测试  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> filters <span class="token keyword">import</span> conv_nested<span class="token comment" spellcheck="true"># Simple convolution kernel.</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create a test image: a white square in the middle</span>test_img <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test_img<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># Run your conv_nested function on the test image</span>test_output <span class="token operator">=</span> conv_nested<span class="token punctuation">(</span>test_img<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Build the expected output</span>expected_output <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>expected_output<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>expected_output<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>expected_output<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>expected_output<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>expected_output<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true"># Plot the test image</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>test_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Test image'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot your convolved image</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>test_output<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Convolution'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot the exepected output</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>expected_output<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Exepected output'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Test if the output matches expected output</span><span class="token keyword">assert</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>test_output <span class="token operator">-</span> expected_output<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"Your solution is not correct."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下：<br><img src="/images/hw2_1.3.png" alt=""><br>然后使用之前导入的图片进行测试：   </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> filters <span class="token keyword">import</span> conv_nested<span class="token comment" spellcheck="true"># Simple convolution kernel.</span><span class="token comment" spellcheck="true"># Feel free to change the kernel to see different outputs.</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>out <span class="token operator">=</span> conv_nested<span class="token punctuation">(</span>img<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot original image</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Original'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot your convolved image</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>out<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Convolution'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot what you should get</span>solution_img <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'convoluted_dog.jpg'</span><span class="token punctuation">,</span> as_gray<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>solution_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'What you should get'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：<br><img src="/images/hw_2.1.3.2.png" alt=""><br>由于这种实现需要判断下标是否越界，所以采取一种更快的方式：先对图像边缘进行填充，然后反转卷积核，滑动卷积核计算每个像素位置的结果<br>填充代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">zero_pad</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> pad_height<span class="token punctuation">,</span> pad_width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" Zero-pad an image.    Ex: a 1x1 image [[1]] with pad_height = 1, pad_width = 2 becomes:        [[0, 0, 0, 0, 0],         [0, 0, 1, 0, 0],         [0, 0, 0, 0, 0]]         of shape (3, 5)    Args:        image: numpy array of shape (H, W).        pad_width: width of the zero padding (left and right padding).        pad_height: height of the zero padding (bottom and top padding).    Returns:        out: numpy array of shape (H+2*pad_height, W+2*pad_width).    """</span>    H<span class="token punctuation">,</span> W <span class="token operator">=</span> image<span class="token punctuation">.</span>shape    out <span class="token operator">=</span> None    out <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>H <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> pad_height<span class="token punctuation">,</span> W <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> pad_width<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 根据边缘大小设计更大的图像</span>    out<span class="token punctuation">[</span>pad_height<span class="token punctuation">:</span>pad_height <span class="token operator">+</span> H<span class="token punctuation">,</span> pad_width<span class="token punctuation">:</span>pad_width <span class="token operator">+</span> W<span class="token punctuation">]</span> <span class="token operator">=</span> image  <span class="token comment" spellcheck="true"># 将原图拷贝到新图中心</span>    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码及结果：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> filters <span class="token keyword">import</span> zero_padpad_width <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment" spellcheck="true"># width of the padding on the left and right</span>pad_height <span class="token operator">=</span> <span class="token number">40</span> <span class="token comment" spellcheck="true"># height of the padding on the top and bottom</span>padded_img <span class="token operator">=</span> zero_pad<span class="token punctuation">(</span>img<span class="token punctuation">,</span> pad_height<span class="token punctuation">,</span> pad_width<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot your padded dog</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>padded_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Padded dog'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot what you should get</span>solution_img <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'padded_dog.jpg'</span><span class="token punctuation">,</span> as_gray<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>solution_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'What you should get'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hw_2_pad.png" alt=""><br>然后以下是更快的卷积运算的实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">conv_fast</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" An efficient implementation of convolution filter.    This function uses element-wise multiplication and np.sum()    to efficiently compute weighted sum of neighborhood at each    pixel.    Hints:        - Use the zero_pad function you implemented above        - There should be two nested for-loops        - You may find np.flip() and np.sum() useful    Args:        image: numpy array of shape (Hi, Wi).        kernel: numpy array of shape (Hk, Wk).    Returns:        out: numpy array of shape (Hi, Wi).    """</span>    Hi<span class="token punctuation">,</span> Wi <span class="token operator">=</span> image<span class="token punctuation">.</span>shape    Hk<span class="token punctuation">,</span> Wk <span class="token operator">=</span> kernel<span class="token punctuation">.</span>shape    out <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>Hi<span class="token punctuation">,</span> Wi<span class="token punctuation">)</span><span class="token punctuation">)</span>    kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>kernel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>kernel<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    pad_height <span class="token operator">=</span> int<span class="token punctuation">(</span>Hk <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    pad_width <span class="token operator">=</span> int<span class="token punctuation">(</span>Wk <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    img_padded <span class="token operator">=</span> zero_pad<span class="token punctuation">(</span>image<span class="token punctuation">,</span> pad_height<span class="token punctuation">,</span> pad_width<span class="token punctuation">)</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Hi<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Wi<span class="token punctuation">)</span><span class="token punctuation">:</span>            localX <span class="token operator">=</span> i <span class="token operator">+</span> pad_height            localY <span class="token operator">=</span> j <span class="token operator">+</span> pad_width            imageArea <span class="token operator">=</span> img_padded<span class="token punctuation">[</span>localX <span class="token operator">-</span> pad_height<span class="token punctuation">:</span>localX <span class="token operator">+</span> pad_height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> localY <span class="token operator">-</span> pad_width<span class="token punctuation">:</span>localY <span class="token operator">+</span> pad_width <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            out<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>imageArea<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码以及结果：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> filters <span class="token keyword">import</span> conv_fastt0 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>out_fast <span class="token operator">=</span> conv_fast<span class="token punctuation">(</span>img<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span>t1 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>out_nested <span class="token operator">=</span> conv_nested<span class="token punctuation">(</span>img<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Compare the running time of the two implementations</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"conv_nested: took %f seconds."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"conv_fast: took %f seconds."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot conv_nested output</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>out_nested<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'conv_nested'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot conv_fast output</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>out_fast<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'conv_fast'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Make sure that the two outputs are the same</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>out_fast <span class="token operator">-</span> out_nested<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Different outputs! Check your implementation."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hw_2_conv_fast_test.png" alt=""><br>可以看出，conv_fast的时间在一秒以内  </p><h3 id="Extra-Credit-1"><a href="#Extra-Credit-1" class="headerlink" title="Extra Credit 1"></a><strong>Extra Credit 1</strong></h3><p>如何实现更快的卷积计算？使用向量化的方法可以达到提高计算效率的目的，思路如下：<br>1.卷积核进行向量化，将其reshape为形状为(H_k<em>W_k,1)的向量<br>2.填充后的图像向量化，由于每一个像素的邻域进行一次卷积操作，共(H_i</em>W_i)个像素，每次操作邻域大小为(H_k,W_k)，所以向量化之后的图像为$(H_i × W_i,H_k × W_k)$大小<br>3.向量点乘，结果reshape  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">conv_faster</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Args:        image: numpy array of shape (Hi, Wi).        kernel: numpy array of shape (Hk, Wk).    Returns:        out: numpy array of shape (Hi, Wi).    """</span>    <span class="token comment" spellcheck="true">### YOUR CODE HERE.reshape</span>    Hi<span class="token punctuation">,</span> Wi <span class="token operator">=</span> image<span class="token punctuation">.</span>shape    Hk<span class="token punctuation">,</span> Wk <span class="token operator">=</span> kernel<span class="token punctuation">.</span>shape    out <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>Hi<span class="token punctuation">,</span> Wi<span class="token punctuation">)</span><span class="token punctuation">)</span>    kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>kernel<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>kernel<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    pad_height <span class="token operator">=</span> int<span class="token punctuation">(</span>Hk <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    pad_width <span class="token operator">=</span> int<span class="token punctuation">(</span>Wk <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    img_padded <span class="token operator">=</span> zero_pad<span class="token punctuation">(</span>image<span class="token punctuation">,</span> pad_height<span class="token punctuation">,</span> pad_width<span class="token punctuation">)</span>     kernel_vec <span class="token operator">=</span> kernel<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>Hk<span class="token operator">*</span>Wk<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    img_vec <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>Hi<span class="token operator">*</span>Wi<span class="token punctuation">,</span>Hk<span class="token operator">*</span>Wk<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>Hi<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>Wi<span class="token punctuation">)</span><span class="token punctuation">:</span>            img_vec<span class="token punctuation">[</span>i<span class="token operator">*</span>Wi <span class="token operator">+</span> j<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> img_padded<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>Hk<span class="token punctuation">,</span>j<span class="token punctuation">:</span>j<span class="token operator">+</span>Wk<span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>Hk<span class="token operator">*</span>Wk<span class="token punctuation">)</span>    result <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>img_vec<span class="token punctuation">,</span> kernel_vec<span class="token punctuation">)</span>    out <span class="token operator">=</span> result<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>Hi<span class="token punctuation">,</span>Wi<span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码以及结果如下：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> filters <span class="token keyword">import</span> conv_fastert0 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>out_fast <span class="token operator">=</span> conv_fast<span class="token punctuation">(</span>img<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span>t1 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>out_faster <span class="token operator">=</span> conv_faster<span class="token punctuation">(</span>img<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span>t2 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Compare the running time of the two implementations</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"conv_fast: took %f seconds."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"conv_faster: took %f seconds."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot conv_nested output</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>out_fast<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'conv_fast'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot conv_fast output</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>out_faster<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'conv_faster'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Make sure that the two outputs are the same</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>out_fast <span class="token operator">-</span> out_faster<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Different outputs! Check your implementation."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hw_2_extra_test.png" alt="">  </p><h2 id="Part-2-Cross-correlation"><a href="#Part-2-Cross-correlation" class="headerlink" title="Part 2: Cross-correlation"></a><strong>Part 2: Cross-correlation</strong></h2><p>该部分主要练习互相关运算以及一些简单的应用  </p><h3 id="2-1-Template-Matching-with-Cross-correlation"><a href="#2-1-Template-Matching-with-Cross-correlation" class="headerlink" title="2.1 Template Matching with Cross-correlation"></a><strong>2.1 Template Matching with Cross-correlation</strong></h3><p>使用互相关性实现模板匹配，题目中描述了一个场景：商店职员需要定期检查货架上的商品，所以开发了一个系统自动追踪<br>note:可以使用之前的conv_faster函数，但是需要将卷积核再反转回去<br>以下代码包括计算互相关的函数，以及使用匹配结果最大值来查找目标存在  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cross_correlation</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    <span class="token comment" spellcheck="true"># 在卷积函数中conv_fast将核进行了翻转，此处将模板翻转是因为计算互相关时匹配核没有反转。</span>    g <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    g <span class="token operator">=</span> np<span class="token punctuation">.</span>flip<span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    out <span class="token operator">=</span> conv_faster<span class="token punctuation">(</span>f<span class="token punctuation">,</span>g<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> out<span class="token keyword">from</span> filters <span class="token keyword">import</span> cross_correlation<span class="token comment" spellcheck="true"># Load template and image in grayscale</span>img <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'shelf.jpg'</span><span class="token punctuation">)</span>img_grey <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'shelf.jpg'</span><span class="token punctuation">,</span> as_grey<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'template.jpg'</span><span class="token punctuation">)</span>temp_grey <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'template.jpg'</span><span class="token punctuation">,</span> as_grey<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Perform cross-correlation between the image and the template</span>out <span class="token operator">=</span> cross_correlation<span class="token punctuation">(</span>img_grey<span class="token punctuation">,</span> temp_grey<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Find the location with maximum similarity</span>y<span class="token punctuation">,</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>unravel_index<span class="token punctuation">(</span>out<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Display product template</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Template'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Display cross-correlation output</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>out<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Cross-correlation (white means more correlated)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Display image</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Result (blue marker on the detected location)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Draw marker at detected location</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'bx'</span><span class="token punctuation">,</span> ms<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span> mew<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hw_2_corr_test.png" alt=""><br>分析上述做法出现的问题：<br>（uncertain)一般之前使用的卷积核各元素之和相加结果较小，而直接用灰度图片作为卷积核计算，结果趋于255.</p><h3 id="2-2-Zero-mean-cross-correlation"><a href="#2-2-Zero-mean-cross-correlation" class="headerlink" title="2.2 Zero-mean cross-correlation"></a><strong>2.2 Zero-mean cross-correlation</strong></h3><p>解决方法1:对匹配模板做零均值的操作</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">zero_mean_cross_correlation</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" Zero-mean cross-correlation of f and g    Subtract the mean of g from g so that its mean becomes zero    """</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    g <span class="token operator">=</span> g <span class="token operator">-</span> g<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># g.mean() Or np.mean(g)</span>    out <span class="token operator">=</span> cross_correlation<span class="token punctuation">(</span>f<span class="token punctuation">,</span>g<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> out<span class="token keyword">from</span> filters <span class="token keyword">import</span> zero_mean_cross_correlation<span class="token comment" spellcheck="true"># Perform cross-correlation between the image and the template</span>out <span class="token operator">=</span> zero_mean_cross_correlation<span class="token punctuation">(</span>img_grey<span class="token punctuation">,</span> temp_grey<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Find the location with maximum similarity</span>y<span class="token punctuation">,</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>unravel_index<span class="token punctuation">(</span>out<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Display product template</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Template'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Display cross-correlation output</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>out<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Cross-correlation (white means more correlated)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Display image</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Result (blue marker on the detected location)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Draw marker at detcted location</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'bx'</span><span class="token punctuation">,</span> ms<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span> mew<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hw2_zero_test.png" alt=""><br>从测试结果来看效果很好。<br>作业里提供了另一种方法：用缩放和阈值来处理（暂不理解）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check_product_on_shelf</span><span class="token punctuation">(</span>shelf<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> zero_mean_cross_correlation<span class="token punctuation">(</span>shelf<span class="token punctuation">,</span> product<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Scale output by the size of the template</span>    out <span class="token operator">=</span> out <span class="token operator">/</span> float<span class="token punctuation">(</span>product<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>product<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Threshold output (this is arbitrary, you would need to tune the threshold for a real application)</span>    out <span class="token operator">=</span> out <span class="token operator">></span> <span class="token number">0.025</span>    <span class="token keyword">if</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>out<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The product is on the shelf'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The product is not on the shelf'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Load image of the shelf without the product</span>img2 <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'shelf_soldout.jpg'</span><span class="token punctuation">)</span>img2_grey <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'shelf_soldout.jpg'</span><span class="token punctuation">,</span> as_gray<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>check_product_on_shelf<span class="token punctuation">(</span>img_grey<span class="token punctuation">,</span> temp_grey<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>check_product_on_shelf<span class="token punctuation">(</span>img2_grey<span class="token punctuation">,</span> temp_grey<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/hw2_thre_test.png" alt="">  </p><h3 id="2-3-Normalized-Cross-correlation"><a href="#2-3-Normalized-Cross-correlation" class="headerlink" title="2.3 Normalized Cross-correlation"></a><strong>2.3 Normalized Cross-correlation</strong></h3><p>如果光线条件不好，亮度较暗，上述方法就不够鲁棒，如下图：<br><img src="/images/dark_test.png" alt=""><br>一个解决方法是在计算互相关的过程中对模板和图像的像素点进行归一化处理，方法如下图：<br><img src="/images/hw2_normal.png" alt=""><br>代码如下：  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">normalized_cross_correlation</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" Normalized cross-correlation of f and g.    Normalize the subimage of f and the template g at each step    before computing the weighted sum of the two.    Hint: you should look up useful numpy functions online for calculating           the mean and standard deviation.    Args:        f: numpy array of shape (Hf, Wf).        g: numpy array of shape (Hg, Wg).    Returns:        out: numpy array of shape (Hf, Wf).    """</span>    out <span class="token operator">=</span> None    Hg<span class="token punctuation">,</span> Wg <span class="token operator">=</span> g<span class="token punctuation">.</span>shape    Hf<span class="token punctuation">,</span> Wf <span class="token operator">=</span> f<span class="token punctuation">.</span>shape    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>f<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    g <span class="token operator">=</span> <span class="token punctuation">(</span>g <span class="token operator">-</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>g<span class="token punctuation">)</span>    pad_height <span class="token operator">=</span> int<span class="token punctuation">(</span>Hg <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    pad_width <span class="token operator">=</span> int<span class="token punctuation">(</span>Wg <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> zero_pad<span class="token punctuation">(</span>f<span class="token punctuation">,</span> pad_height<span class="token punctuation">,</span> pad_width<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># zero padding</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>Hf<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>Wf<span class="token punctuation">)</span><span class="token punctuation">:</span>            patch <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>Hg<span class="token punctuation">,</span>j<span class="token punctuation">:</span>j<span class="token operator">+</span>Wg<span class="token punctuation">]</span>            patch <span class="token operator">=</span> <span class="token punctuation">(</span>patch <span class="token operator">-</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>patch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>patch<span class="token punctuation">)</span>            out<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>cross_correlation<span class="token punctuation">(</span>patch<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> out<span class="token keyword">from</span> filters <span class="token keyword">import</span> normalized_cross_correlation<span class="token comment" spellcheck="true"># Perform normalized cross-correlation between the image and the template</span>out <span class="token operator">=</span> normalized_cross_correlation<span class="token punctuation">(</span>img_grey<span class="token punctuation">,</span> temp_grey<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Find the location with maximum similarity</span>y<span class="token punctuation">,</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>unravel_index<span class="token punctuation">(</span>out<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Display image</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Result (red marker on the detected location)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Draw marker at detcted location</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token string">'rx'</span><span class="token punctuation">,</span> ms<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> mew<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是实际运行过程中速度较慢  </p><h2 id="Part-3-Separable-Filters"><a href="#Part-3-Separable-Filters" class="headerlink" title="Part 3: Separable Filters"></a><strong>Part 3: Separable Filters</strong></h2><h3 id="3-1-Theory"><a href="#3-1-Theory" class="headerlink" title="3.1 Theory"></a><strong>3.1 Theory</strong></h3><p>Consider an $𝑀_1×𝑁_1$ image $𝐼$ and an $𝑀_2×𝑁_2$ filter $𝐹$ . A filter $𝐹$ is separable if it can be written as a product of two 1D filters:$𝐹=𝐹_1𝐹_2$.And<br>$$𝐼∗𝐹=(𝐼∗𝐹1)∗𝐹2$$   </p><h3 id="3-2-Complexity-comparison"><a href="#3-2-Complexity-comparison" class="headerlink" title="3.2 Complexity comparison"></a><strong>3.2 Complexity comparison</strong></h3><p>不分解，乘法操作次数为$𝑀_1⋅𝑁_1$,分解之后为$M_1+N_1$  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此次作业主要是熟悉互相关运算和卷积运算的定义以及使用。    </p>]]></content>
      
      
      <categories>
          
          <category> CS131 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
            <tag> Python </tag>
            
            <tag> CS131 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stanforrd CS131 Computer Vision:Foundations and Applications hw_0</title>
      <link href="/2020/03/10/stanford-cs131-computer-vision-foundations-and-applications-hw-0/"/>
      <url>/2020/03/10/stanford-cs131-computer-vision-foundations-and-applications-hw-0/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript"   src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h2 id="Homework-0"><a href="#Homework-0" class="headerlink" title="Homework 0"></a><strong>Homework 0</strong></h2><p>本次作业主要是使用python进行基本的线性代数计算和图像操作<br>目的之一是为了尽快地熟悉使用Python库函数  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Imports the print function from newer versions of python</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token comment" spellcheck="true">#Setup</span><span class="token comment" spellcheck="true"># The Random module for implements pseudo-random number generators</span><span class="token keyword">import</span> random <span class="token comment" spellcheck="true"># Numpy is the main package for scientific computing with Python. </span><span class="token comment" spellcheck="true"># This will be one of our most used libraries in this class</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true">#Imports all the methods in each of the files: linalg.py and imageManip.py</span><span class="token keyword">from</span> linalg <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> imageManip <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#Matplotlib is a useful plotting library for python </span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># This code is to make matplotlib figures appear inline in the</span><span class="token comment" spellcheck="true"># notebook rather than in a new window.</span><span class="token operator">%</span>matplotlib inlineplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.figsize'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># set default size of plots</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'image.interpolation'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'nearest'</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'image.cmap'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'gray'</span><span class="token comment" spellcheck="true"># Some more magic so that the notebook will reload external python modules;</span><span class="token comment" spellcheck="true"># see http://stackoverflow.com/questions/1907993/autoreload-of-modules-in-ipython</span><span class="token operator">%</span>load_ext autoreload<span class="token operator">%</span>autoreload <span class="token number">2</span><span class="token operator">%</span>reload_ext autoreload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Question-1-Linear-Algebra-Review"><a href="#Question-1-Linear-Algebra-Review" class="headerlink" title="Question 1: Linear Algebra Review"></a><strong>Question 1: Linear Algebra Review</strong></h2><p>这一部分主要是利用numpy复习学过的线性代数操作  </p><h3 id="Question-1-1"><a href="#Question-1-1" class="headerlink" title="Question 1.1"></a><strong>Question 1.1</strong></h3><p>创建并初始化三个np.array对象  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">### YOUR CODE HERE</span>M <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">pass</span><span class="token comment" spellcheck="true">### END CODE HERE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Question-1-2"><a href="#Question-1-2" class="headerlink" title="Question 1.2"></a><strong>Question 1.2</strong></h3><p>使用numpy.dot计算a.T*b(点乘/内积)  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dot_product</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Question-1-3"><a href="#Question-1-3" class="headerlink" title="Question 1.3"></a><strong>Question 1.3</strong></h3><p>使用np.matmul(或者np.dot)计算$(a*b) * (M * a^T)$   </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">complicated_matrix_function</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    out1 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    out2 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>M<span class="token punctuation">,</span>a<span class="token punctuation">.</span>T<span class="token punctuation">)</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>out2<span class="token punctuation">,</span>out1<span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Question-1-4"><a href="#Question-1-4" class="headerlink" title="Question 1.4"></a><strong>Question 1.4</strong></h3><p>使用np.linalg.svd进行奇异值分解<br>SVD:假设我们的矩阵$A$是一个$m×n$的矩阵，那么我们定义矩阵$A$的SVD为：<br>$A=UΣV^T$其中U是一个$m×m$的矩阵，$Σ$是一个$m×n$的矩阵，除了主对角线上的元素以外全为0，主对角线上的每个元素都称为奇异值，$V$是一个$n×n$的矩阵。$U$和$V$都是酉矩阵，即满足$UTU=I$,$VTV=I$  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">svd</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span>    u <span class="token operator">=</span> None    s <span class="token operator">=</span> None    v <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    u<span class="token punctuation">,</span>s<span class="token punctuation">,</span>v <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>svd<span class="token punctuation">(</span>M<span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> u<span class="token punctuation">,</span> s<span class="token punctuation">,</span> v<span class="token keyword">def</span> <span class="token function">get_singular_values</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return top n singular values of matrix.    Returns:        singular_values: array of shape (k)    """</span>    singular_values <span class="token operator">=</span> None    u<span class="token punctuation">,</span> s<span class="token punctuation">,</span> v <span class="token operator">=</span> svd<span class="token punctuation">(</span>M<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    singular_values <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> singular_values<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Question-1-5"><a href="#Question-1-5" class="headerlink" title="Question 1.5"></a><strong>Question 1.5</strong></h3><p>使用np.linalg.eig进行特征分解，计算特征值和特征向量<br>特征向量与特征值：$A$为$n$阶矩阵，若数$λ$和$n$维非0列向量$x$满足$Ax=λx$，那么数$λ$称为$A$的<strong>特征值</strong>，x称为A的对应于特征值λ的<strong>特征向量</strong>。式$Ax=λx$也可写成$(A-λE)x=0$，并且$|λE-A|$叫做$A$的<strong>特征多项式</strong>。当特征多项式等于0的时候，称为$A$的<strong>特征方程</strong>，特征方程是一个齐次线性方程组，求解特征值的过程其实就是求解特征方程的解。  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">eigen_decomp</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Implement eigenvalue decomposition.    Returns:        w: numpy array of shape (m, m) such that the column v[:,i] is the eigenvector corresponding to the eigenvalue w[i].        v: Matrix where every column is an eigenvector.    """</span>    w <span class="token operator">=</span> None    v <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    w<span class="token punctuation">,</span> v <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>M<span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> w<span class="token punctuation">,</span> v<span class="token keyword">def</span> <span class="token function">get_eigen_values_and_vectors</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return top k eigenvalues and eigenvectors of matrix M. By top k    here we mean the eigenvalues with the top ABSOLUTE values (lookup    np.argsort for a hint on how to do so.)    Returns:        eigenvalues: list of length k containing the top k eigenvalues        eigenvectors: list of length k containing the top k eigenvectors            of shape (m,)    """</span>    w<span class="token punctuation">,</span> v <span class="token operator">=</span> eigen_decomp<span class="token punctuation">(</span>M<span class="token punctuation">)</span>    eigen_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    eigen_vectors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    eigen_values <span class="token operator">=</span> w<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span>    eigen_vectors <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> eigen_values<span class="token punctuation">,</span> eigen_vectors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Question-2-Image-Manipulation"><a href="#Question-2-Image-Manipulation" class="headerlink" title="Question 2: Image Manipulation"></a><strong>Question 2: Image Manipulation</strong></h2><p>该部分主要使用skimage对图像进行一些基础的操作</p><pre class="line-numbers language-python"><code class="language-python">image1_path <span class="token operator">=</span> <span class="token string">'./image1.jpg'</span>image2_path <span class="token operator">=</span> <span class="token string">'./image2.jpg'</span><span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Show image</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Question-2-1"><a href="#Question-2-1" class="headerlink" title="Question 2.1"></a><strong>Question 2.1</strong></h3><p>加载图像  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    <span class="token comment" spellcheck="true"># Use skimage io.imread</span>    out <span class="token operator">=</span> io<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token comment" spellcheck="true"># Let's convert the image to be between the correct range.</span>    out <span class="token operator">=</span> out<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255</span>    <span class="token keyword">return</span> outimage1 <span class="token operator">=</span> load<span class="token punctuation">(</span>image1_path<span class="token punctuation">)</span>image2 <span class="token operator">=</span> load<span class="token punctuation">(</span>image2_path<span class="token punctuation">)</span>display<span class="token punctuation">(</span>image1<span class="token punctuation">)</span>display<span class="token punctuation">(</span>image2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Question-2-2"><a href="#Question-2-2" class="headerlink" title="Question 2.2"></a><strong>Question 2.2</strong></h3><p>使用公式$x_n=0.5*x^2_p$处理图片中的每一个像素，由于所有的像素值均在[0,1]，所以此操作会使图像变暗  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dim_image</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>image<span class="token punctuation">,</span>image<span class="token punctuation">)</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>out<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2.2.png" alt="">  </p><h3 id="Question-2-3"><a href="#Question-2-3" class="headerlink" title="Question 2.3"></a><strong>Question 2.3</strong></h3><p>将图片转化为灰度图像</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">convert_to_grey_scale</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    out <span class="token operator">=</span> color<span class="token punctuation">.</span>rgb2gray<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> outgrey_image <span class="token operator">=</span> convert_to_grey_scale<span class="token punctuation">(</span>image1<span class="token punctuation">)</span>display<span class="token punctuation">(</span>grey_image<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2.3.png" alt="">  </p><h3 id="Question-2-4"><a href="#Question-2-4" class="headerlink" title="Question 2.4"></a><strong>Question 2.4</strong></h3><p>去除图像中指定的通道  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rgb_exclusion</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">:</span>       out <span class="token operator">=</span> image<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    <span class="token keyword">if</span> channel <span class="token operator">==</span> <span class="token string">'R'</span><span class="token punctuation">:</span>        out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">elif</span> channel <span class="token operator">==</span> <span class="token string">'G'</span><span class="token punctuation">:</span>        out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> outwithout_red <span class="token operator">=</span> rgb_exclusion<span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">)</span>without_blue <span class="token operator">=</span> rgb_exclusion<span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span>without_green <span class="token operator">=</span> rgb_exclusion<span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Below is the image without the red channel."</span><span class="token punctuation">)</span>display<span class="token punctuation">(</span>without_red<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Below is the image without the green channel."</span><span class="token punctuation">)</span>display<span class="token punctuation">(</span>without_green<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Below is the image without the blue channel."</span><span class="token punctuation">)</span>display<span class="token punctuation">(</span>without_blue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2.4.1.png" alt=""><br><img src="/images/2.4.2.png" alt=""><br><img src="/images/2.4.3.png" alt="">   </p><h3 id="Question-2-5"><a href="#Question-2-5" class="headerlink" title="Question 2.5"></a><strong>Question 2.5</strong></h3><p>输出LAB图片中指定的通道</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lab_decomposition</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">:</span>    lab <span class="token operator">=</span> color<span class="token punctuation">.</span>rgb2lab<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    <span class="token keyword">if</span> channel <span class="token keyword">is</span> <span class="token string">'L'</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">elif</span> channel <span class="token keyword">is</span> <span class="token string">'A'</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">elif</span> channel <span class="token keyword">is</span> <span class="token string">'B'</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Channel ERROR"</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> outimage_l <span class="token operator">=</span> lab_decomposition<span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">)</span>image_a <span class="token operator">=</span> lab_decomposition<span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>image_b <span class="token operator">=</span> lab_decomposition<span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Below is the image with only the L channel."</span><span class="token punctuation">)</span>display<span class="token punctuation">(</span>image_l<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Below is the image with only the A channel."</span><span class="token punctuation">)</span>display<span class="token punctuation">(</span>image_a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Below is the image with only the B channel."</span><span class="token punctuation">)</span>display<span class="token punctuation">(</span>image_b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2.5.1.png" alt=""><br><img src="/images/2.5.2.png" alt=""><br><img src="/images/2.5.3.png" alt="">   </p><h3 id="Question-2-6"><a href="#Question-2-6" class="headerlink" title="Question 2.6"></a><strong>Question 2.6</strong></h3><p>输出HSV图片中指定的通道</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hsv_decomposition</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> channel<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    hsv <span class="token operator">=</span> color<span class="token punctuation">.</span>rgb2hsv<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    <span class="token keyword">if</span> channel <span class="token keyword">is</span> <span class="token string">'H'</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> hsv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">elif</span> channel <span class="token keyword">is</span> <span class="token string">'S'</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> hsv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">elif</span> channel <span class="token keyword">is</span> <span class="token string">'V'</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> hsv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Channel ERROR"</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> outimage_h <span class="token operator">=</span> hsv_decomposition<span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">)</span>image_s <span class="token operator">=</span> hsv_decomposition<span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">)</span>image_v <span class="token operator">=</span> hsv_decomposition<span class="token punctuation">(</span>image1<span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Below is the image with only the H channel."</span><span class="token punctuation">)</span>display<span class="token punctuation">(</span>image_h<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Below is the image with only the S channel."</span><span class="token punctuation">)</span>display<span class="token punctuation">(</span>image_s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Below is the image with only the V channel."</span><span class="token punctuation">)</span>display<span class="token punctuation">(</span>image_v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2.6.1.png" alt=""><br><img src="/images/2.6.2.png" alt=""><br><img src="/images/2.6.3.png" alt="">   </p><h3 id="Question-2-7"><a href="#Question-2-7" class="headerlink" title="Question 2.7"></a><strong>Question 2.7</strong></h3><p>两半幅图像去除指定通道后的拼接</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mix_images</span><span class="token punctuation">(</span>image1<span class="token punctuation">,</span> image2<span class="token punctuation">,</span> channel1<span class="token punctuation">,</span> channel2<span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    image1 <span class="token operator">=</span> image1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span>int<span class="token punctuation">(</span>image1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    image2 <span class="token operator">=</span> image2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>image2<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>    image1 <span class="token operator">=</span> rgb_exclusion<span class="token punctuation">(</span>image1<span class="token punctuation">,</span>channel1<span class="token punctuation">)</span>    image2 <span class="token operator">=</span> rgb_exclusion<span class="token punctuation">(</span>image2<span class="token punctuation">,</span>channel2<span class="token punctuation">)</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>image1<span class="token punctuation">,</span> image2<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    <span class="token keyword">return</span> outimage_mixed <span class="token operator">=</span> mix_images<span class="token punctuation">(</span>image1<span class="token punctuation">,</span> image2<span class="token punctuation">,</span> channel1<span class="token operator">=</span><span class="token string">'R'</span><span class="token punctuation">,</span> channel2<span class="token operator">=</span><span class="token string">'G'</span><span class="token punctuation">)</span>display<span class="token punctuation">(</span>image_mixed<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Sanity Check: the sum of the image matrix should be 76421.98</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>image_mixed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/2.7.png" alt="">   </p><h3 id="Extra-credit"><a href="#Extra-credit" class="headerlink" title="Extra credit"></a><strong>Extra credit</strong></h3><p>对一幅图像的四个象限进行不同的处理  </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mix_quadrants</span><span class="token punctuation">(</span>image1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""THIS IS AN EXTRA CREDIT FUNCTION.    This function takes an image, and performs a different operation    to each of the 4 quadrants of the image. Then it combines the 4    quadrants back together.    Here are the 4 operations you should perform on the 4 quadrants:        Top left quadrant: Remove the 'R' channel using `rgb_exclusion()`.        Top right quadrant: Dim the quadrant using `dim_image()`.        Bottom left quadrant: Brighthen the quadrant using the function:            x_n = x_p^0.5        Bottom right quadrant: Remove the 'R' channel using `rgb_exclusion()`.    Args:        image1: numpy array of shape(image_height, image_width, 3).    Returns:        out: numpy array of shape(image_height, image_width, 3).    """</span>    out <span class="token operator">=</span> None    <span class="token comment" spellcheck="true">### YOUR CODE HERE</span>    left_top <span class="token operator">=</span> image1<span class="token punctuation">[</span><span class="token punctuation">:</span> int<span class="token punctuation">(</span>image1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span> int<span class="token punctuation">(</span>image1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    left_bot <span class="token operator">=</span> image1<span class="token punctuation">[</span>int<span class="token punctuation">(</span>image1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span> int<span class="token punctuation">(</span>image1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    right_top <span class="token operator">=</span> image1<span class="token punctuation">[</span><span class="token punctuation">:</span> int<span class="token punctuation">(</span>image1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>image1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>    right_bot <span class="token operator">=</span> image1<span class="token punctuation">[</span>int<span class="token punctuation">(</span>image1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>image1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>    left_top <span class="token operator">=</span> rgb_exclusion<span class="token punctuation">(</span>left_top<span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">)</span>    left_bot <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>left_bot<span class="token punctuation">)</span>    left_image <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>left_top<span class="token punctuation">,</span>left_bot<span class="token punctuation">)</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    right_top <span class="token operator">=</span> dim_image<span class="token punctuation">(</span>right_top<span class="token punctuation">)</span>    right_bot <span class="token operator">=</span> rgb_exclusion<span class="token punctuation">(</span>right_bot<span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">### END YOUR CODE</span>    right_image <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>right_top<span class="token punctuation">,</span>right_bot<span class="token punctuation">)</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>left_image<span class="token punctuation">,</span> right_image<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> outmixed_quadrants <span class="token operator">=</span> mix_quadrants<span class="token punctuation">(</span>image1<span class="token punctuation">)</span>display<span class="token punctuation">(</span>mixed_quadrants<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/extra0.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此次作业主要是熟悉numpy、skimage一些常用的函数，并熟悉使用这些函数进行一些计算与操作，原理上需要了解的是特征值与特征向量的概念与计算、奇异值分解的原理  </p>]]></content>
      
      
      <categories>
          
          <category> CS131 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
            <tag> Python </tag>
            
            <tag> CS131 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 94 Binary Tree Inorder Traversal</title>
      <link href="/2020/03/05/leetcode-94-binary-tree-inorder-traversal/"/>
      <url>/2020/03/05/leetcode-94-binary-tree-inorder-traversal/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p><p><strong>Example:</strong>  </p><p><strong>Input:</strong> [1,null,2,3]</p><p><strong>Output:</strong> [1,3,2]  </p><p><strong>Follow up:</strong><br>Recursive solution is trivial, could you do it iteratively?</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题是求二叉树的中序遍历结果，递归写法很简单，在函数中对左子节点递归调用，根节点push到vector中，右子节点递归调用即可<br>也可以使用栈来转化为非递归写法，从根结点开始，沿左子节点方向一直遍历过程中将所有节点压入栈，直至左子节点为空，之后取出栈顶节点（从栈顶取出节点说明此节点左子树已经遍历完毕）保存，然后再向右子节点方向相同遍历  </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="非递归版本"><a href="#非递归版本" class="headerlink" title="非递归版本"></a>非递归版本</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>p<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                p <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>res<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 36 Valid Sudoku</title>
      <link href="/2020/03/05/leetcode-36-valid-sudoku/"/>
      <url>/2020/03/05/leetcode-36-valid-sudoku/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p><p>1.Each row must contain the digits 1-9 without repetition.<br>2.Each column must contain the digits 1-9 without repetition.<br>3.Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.</p><p><img src="/images/2.png" alt="">  </p><p>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong><br>[<br>  [“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”],<br>  [“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”],<br>  [“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”],<br>  [“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”],<br>  [“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”],<br>  [“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”],<br>  [“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”],<br>  [“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”],<br>  [“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]<br>]<br><strong>Output</strong>: true  </p><p><strong>Example 2:</strong>  </p><p><strong>Input:</strong><br>[<br>  [“8”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”],<br>  [“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”],<br>  [“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”],<br>  [“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”],<br>  [“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”],<br>  [“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”],<br>  [“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”],<br>  [“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”],<br>  [“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]<br>]<br><strong>Output</strong>: false   </p><p><strong>Explanation</strong>: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8’s in the top left 3x3 sub-box, it is invalid.</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题是判断一个数独矩阵是否有效，即每个小矩阵内必须都是1到9的数字不能有重复，同时大矩阵的横纵列也不能有重复数字<br>用三个bool型矩阵，每个矩阵[i][j]下标元素表示是否在第i行(列、小矩阵)出现过j，这里需要注意的是小矩阵对应的bool矩阵下标的转换</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">bool</span> rowNum<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> colNum<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> matNum<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>colNum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>colNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>matNum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>matNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> data <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token operator">||</span>colNum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token operator">||</span>matNum<span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    rowNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    colNum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    matNum<span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 33 Search in Rotated Sorted Array</title>
      <link href="/2020/03/02/leetcode-33-search-in-rotated-sorted-array/"/>
      <url>/2020/03/02/leetcode-33-search-in-rotated-sorted-array/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).</p><p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p><p>You may assume no duplicate exists in the array.</p><p>Your algorithm’s runtime complexity must be in the order of O(log n).</p><p><strong>Example 1:</strong> </p><p>Input: nums = [4,5,6,7,0,1,2], target = 0<br>Output: 4  </p><p><strong>Example 2:</strong></p><p>Input: nums = [4,5,6,7,0,1,2], target = 3<br>Output: -1</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题是在一个旋转数组中查找给定值，由于题目中复杂度的限制，依然考虑二分搜索。<br>但这道题的难点是旋转后的数组形式上不是有序数组，但是无论怎样旋转，数组中的一部分仍然是有序的。对某一数组列出所有旋转方式后我们可以得出规律：如果中间的数小于最右边的数，则右半段是有序的，若中间数大于最右边数，则左半段是有序的，只要在有序的半段里用首尾两个数组来判断目标值是否在这一区域内，这样就可以确定保留哪半边了。<br>如果选择与左边比较，则判断条件要改为nums[mid]&gt;=nums[lp],因为二者有可能相等</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> lp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rp <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>lp <span class="token operator">&lt;=</span> rp<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>lp <span class="token operator">+</span> rp<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">>=</span> target<span class="token punctuation">)</span> lp <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> rp <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> rp <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> lp <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 28 Implement strStr()</title>
      <link href="/2020/03/02/leetcode-28-implement-strstr/"/>
      <url>/2020/03/02/leetcode-28-implement-strstr/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Implement strStr().</p><p>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p><p><strong>Example 1:</strong></p><p>Input: haystack = “hello”,needle = “ll”<br>Output: 2  </p><p><strong>Example 2:</strong></p><p>Input: haystack = “aaaaa”, needle = “bba”<br>Output: -1  </p><p><strong>Clarification:</strong></p><p>What should we return when needle is an empty string? This is a great question to ask during an interview.</p><p>For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C’s strstr() and Java’s indexOf().  </p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题是在一个字符串中找另一个字符串第一次出现的位置，如果子串为空串返回0，然后遍历字符串，对于每一个字符，如果与子串第一个字符相等，则逐一判断是否完全与子串相同，如果有不同的，跳出循环继续遍历。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span>string haystack<span class="token punctuation">,</span> string needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> h_len <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> n_len <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>h_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> h_len <span class="token operator">-</span> n_len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>needle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n_len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span>                        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 20 Valid Parentheses</title>
      <link href="/2020/03/02/leetcode-20-valid-parentheses/"/>
      <url>/2020/03/02/leetcode-20-valid-parentheses/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p><p>An input string is valid if:</p><p>Open brackets must be closed by the same type of brackets.<br>Open brackets must be closed in the correct order.<br>Note that an empty string is also considered valid.</p><p><strong>Example 1:</strong><br>Input: “()”<br>Output: true  </p><p><strong>Example 2:</strong><br>Input: “()[]{}”<br>Output: true </p><p><strong>Example 3:</strong><br>    Input: “(]”<br>    Output: false  </p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题是判断字符串的括号序列是否匹配，遍历输入，遇到左括号就入栈，遇到右括号，若栈空返回false，否则看栈顶元素是否为对应的左括号，如果不是返回false</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> sym<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'['</span><span class="token operator">||</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'{'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sym<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sym<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sym<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span> sym<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">']'</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sym<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sym<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span> sym<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'}'</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>sym<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sym<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'{'</span><span class="token punctuation">)</span> sym<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sym<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 21 Merge Two Sorted Lists</title>
      <link href="/2020/03/01/leetcode-21-merge-two-sorted-lists/"/>
      <url>/2020/03/01/leetcode-21-merge-two-sorted-lists/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><p><strong>Example:</strong></p><pre><code>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4   </code></pre><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>简单的有序链表归并</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> res <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;=</span> l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">=</span> list<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                 <span class="token punctuation">{</span>                    res<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>                    res <span class="token operator">=</span> res<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                l1 <span class="token operator">=</span> l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">=</span> list<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                 <span class="token punctuation">{</span>                    res<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>                      res <span class="token operator">=</span> res<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                l2 <span class="token operator">=</span> l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>res<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l1 <span class="token operator">?</span> l1 <span class="token operator">:</span> l2<span class="token punctuation">;</span>        <span class="token keyword">else</span> list <span class="token operator">=</span> l1 <span class="token operator">?</span> l1 <span class="token operator">:</span> l2<span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 16 3Sum Closest</title>
      <link href="/2020/03/01/leetcode-16-3sum-closest/"/>
      <url>/2020/03/01/leetcode-16-3sum-closest/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><p><strong>Example:</strong></p><pre><code>Given array nums = [-1, 2, 1, -4], and target = 1.The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</code></pre><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题是求数组中三个数之和与最为接近的值</p><p>与之前3Sum的思路类似，只是要定义一个变量记录差的绝对值，每次求3个数的和比较差值进行更新</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>修改版</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> DIFF <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//if current number is positive,cannot get result</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> lp <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rp <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>lp <span class="token operator">&lt;</span> rp<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> DIFF<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    DIFF <span class="token operator">=</span> diff<span class="token punctuation">;</span>                    res <span class="token operator">=</span> sum<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> lp<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> rp<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一版（脑子不太清醒……）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> DIFF <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">int</span> flag<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//if current number is positive,cannot get result</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> lp <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rp <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>lp <span class="token operator">&lt;</span> rp<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> DIFF<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        DIFF <span class="token operator">=</span> diff<span class="token punctuation">;</span>                        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>lp <span class="token operator">&lt;</span> rp <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>rp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> rp<span class="token operator">--</span><span class="token punctuation">;</span>                        rp<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        rp<span class="token operator">--</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> DIFF<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        DIFF <span class="token operator">=</span> diff<span class="token punctuation">;</span>                        flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>lp <span class="token operator">&lt;</span> rp <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>lp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> lp<span class="token operator">++</span><span class="token punctuation">;</span>                        lp<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        lp<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target <span class="token operator">+</span> DIFF<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> target <span class="token operator">-</span> DIFF<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 15 3Sum</title>
      <link href="/2020/03/01/leetcode-15-3sum/"/>
      <url>/2020/03/01/leetcode-15-3sum/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate triplets.</p><p><strong>Example:</strong></p><pre><code>Given array nums = [-1, 0, 1, 2, -1, -4],A solution set is:[    [-1, 0, 1],    [-1, -1, 2]]   </code></pre><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题是求数组中三个数之和为0的组合  </p><p>为使三数之和为0，除非全为0，否则组合之中一定有正有负。所以可以先排序数组，便于查找。查找的过程可以按照顺序，先固定一个数，然后从后边的数组中用双指针找出两个数使三数之和为0  </p><p>在遍历过程中，如果固定的第一个数大于零，由于数组是有序的，不可能出现和为0的组合。另外还要考虑跳过重复元素  </p><p>双指针的更新要看当前三个数之和是否大于0，是的话更新右指针，否更新左指针</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>size<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//if current number is positive,cannot get result</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> lp <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rp <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>lp<span class="token operator">&lt;</span>rp<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token punctuation">,</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>lp <span class="token operator">&lt;</span> rp <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>lp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> lp<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>lp <span class="token operator">&lt;</span> rp <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>rp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> rp<span class="token operator">--</span><span class="token punctuation">;</span>                    lp<span class="token operator">++</span><span class="token punctuation">;</span>                    rp<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>lp<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>rp<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> lp<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> rp<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 14 Longest Common Prefix</title>
      <link href="/2020/02/29/leetcode-14-longest-common-prefix/"/>
      <url>/2020/02/29/leetcode-14-longest-common-prefix/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> [“flower”,”flow”,”flight”]<br><strong>Output:</strong> “fl”  </p><p><strong>Example 2:</strong>  </p><p><strong>Input:</strong> [“dog”,”racecar”,”car”]<br><strong>Output:</strong> “”<br>Explanation: There is no common prefix among the input strings.  </p><p><strong>Note:</strong><br>All given inputs are in lowercase letters a-z.</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题是求一组字符串的共同前缀，直接查找即可，对于一组string组成的vector,可将其看作一个二维数组，从第一列开始比较是否一列上所有字符都相同，如果相同继续检查下列，否则返回。<br>可以先找出vector中最短的字符串来确定要查找的列数</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//without any string to handle</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> MIN_LENGTH <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//find out the string with minimum length</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>MIN_LENGTH<span class="token punctuation">)</span> MIN_LENGTH <span class="token operator">=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//if all the strings have the same character,then add it to res</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>MIN_LENGTH<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">char</span> tmp <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> tmp<span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 34 Find First and Last Position of Element in Sorted Array </title>
      <link href="/2020/02/29/leetcode-34-find-first-and-last-position-of-element-in-sorted-array/"/>
      <url>/2020/02/29/leetcode-34-find-first-and-last-position-of-element-in-sorted-array/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.</p><p>Your algorithm’s runtime complexity must be in the order of O(log n).</p><p>If the target is not found in the array, return [-1, -1].</p><p><strong>Example 1:</strong></p><p><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 8<br><strong>Output:</strong> [3,4]  </p><p><strong>Example 2:</strong></p><p><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 6<br><strong>Output:</strong>  [-1,-1]  </p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>题意为在一个有序整数数组中寻找相同目标值的最左和最右位置。看到题目中要求的时间复杂度，典型的为二分查找的时间复杂度。<br>首先对原数组二分查找出一个target值的位置，由于原数组是有序的，所以可以从这个位置起向两侧搜索，找到最左出现位置和最右出现位置<br>值得注意的是代码的第33、34行while循环的判断条件，此种写法先判断ls和rs的值，如果颠倒两个判断条件会出现泄露的错误。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">searchRange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>ls <span class="token operator">&lt;</span> rs<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>ls <span class="token operator">+</span> rs<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ls <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                rs <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ls <span class="token operator">=</span> mid<span class="token punctuation">;</span>                rs <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>ls<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>ls <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>ls <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> ls<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>rs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">)</span> rs<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span> ls <span class="token punctuation">,</span> rs <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 27 Remove Elements</title>
      <link href="/2020/02/29/leetcode-27-remove-elements/"/>
      <url>/2020/02/29/leetcode-27-remove-elements/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array</strong> in-place with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><p><strong>Example 1:</strong></p><p>Given nums = [3,2,2,3], val = 3,  </p><p>Your function should return length = 2, with the first two elements of nums being 2.  </p><p>It doesn’t matter what you leave beyond the returned length.  </p><p><strong>Example 2:</strong></p><p>Given nums = [0,1,2,2,3,0,4,2], val = 2,</p><p>Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</p><p>Note that the order of those five elements can be arbitrary.</p><p>It doesn’t matter what values are set beyond the returned length.  </p><p><strong>Clarification:</strong></p><p>Confused why the returned value is an integer but your answer is an array?</p><p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p><p>Internally you can think of this:</p><p>// nums is passed in by reference. (i.e., without making a copy)<br>int len = removeElement(nums, val);</p><p>// any modification to nums in your function would be known by the caller.  </p><p>// using the length returned by your function, it prints the first len elements. </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>题意为程序返回去除某些特定值之后数组的长度L，并且新数组的元素必须在[0,L-1]的范围内，所以考虑STL中remove的思想，讲去除掉的元素放到L之后，实现是要将L之后的需要保留的元素与之交换  </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bac <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>pre<span class="token operator">&lt;=</span>bac<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token operator">==</span>val<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>bac<span class="token punctuation">]</span><span class="token operator">!=</span>val<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>bac<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>bac<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                    pre<span class="token operator">++</span><span class="token punctuation">;</span> bac<span class="token operator">--</span><span class="token punctuation">;</span>                    ans<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>bac<span class="token punctuation">]</span><span class="token operator">==</span>val<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    bac<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                pre<span class="token operator">++</span><span class="token punctuation">;</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FAST算法</title>
      <link href="/2020/02/28/fast-suan-fa/"/>
      <url>/2020/02/28/fast-suan-fa/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript"   src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><h2 id="FAST简介"><a href="#FAST简介" class="headerlink" title="FAST简介"></a>FAST简介</h2><p>全称 Features from Accelerated Segment Test,是一种用于焦点检测的算法，主要原理是对于某一个检测点，通过以该点为圆心周围的16个像素点判断是否为角点。  </p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><h3 id="STEP1-初步确定候选角点"><a href="#STEP1-初步确定候选角点" class="headerlink" title="STEP1 初步确定候选角点"></a>STEP1 初步确定候选角点</h3><p><img src="/images/1.png" alt=""><br>1.对于图中的任一像素点p,假定其像素值为$I_p$<br>2.定义阈值$T$,在论文中被设定为像素值的20%<br>3.考虑图中所示的以$p$为圆心，包含16个像素点的圆<br>4.如果该像素点为角点，那么至少有N个点的像素值高于$I_p+T$或者低于$I_p-T$.根据N取值的不同，FAST算法分为不同的版本，如FAST-12,FAST-9等<br>5.首先检测图中1，5，9，13四个位置的像素点，至少要有三个满足阈值条件才存在角点，否则可断定不是角点<br>6.若满足5中条件，检测全部16个点，是否有大于N个点满足阈值条件，如果是则该点为角点。<br>7.对所有点重复过程  </p><h3 id="STEP2-非极大值抑制"><a href="#STEP2-非极大值抑制" class="headerlink" title="STEP2 非极大值抑制"></a>STEP2 非极大值抑制</h3><p>需要进行非极大值抑制的原因是<strong>候选角点中有很多是紧挨在一起的，需要通过非极大值抑制消除影响</strong><br>1.对于每个候选角点先计算得分函数：$I_p$与16个圆上的像素点差值的绝对值相加<br>$$V=\sum^{16}_i|I_p-I_i|$$<br>2.每两个相邻的角点比较V的值，较小的舍弃掉  </p><p>至此，FAST算法结束</p>]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/28/hello-world/"/>
      <url>/2020/02/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 26 Remove Duplicates from Sorted Array</title>
      <link href="/2020/02/28/leetcode-26-remove-duplicates-from-sorted-array/"/>
      <url>/2020/02/28/leetcode-26-remove-duplicates-from-sorted-array/</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h2><p><strong>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.</strong>  </p><p><strong>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</strong>  </p><p><strong>Example 1:</strong>  </p><p>Given nums = [1,1,2],  </p><p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.  </p><p>It doesn’t matter what you leave beyond the returned length.  </p><p><strong>Example 2:</strong>  </p><p>Given nums = [0,0,1,1,1,2,2,3,3,4],  </p><p>Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.  </p><p>It doesn’t matter what values are set beyond the returned length.  </p><p><strong>Clarification:</strong>  </p><p><strong>Confused why the returned value is an integer but your answer is an array?</strong>  </p><p><strong>Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</strong>  </p><p><strong>Internally you can think of this:</strong>  </p><p>// nums is passed in by reference. (i.e., without making a copy)<br>int len = removeDuplicates(nums);</p><p>// any modification to nums in your function would be known by the caller.<br>// using the length returned by your function, it prints the first len elements.<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p><p>题意为给出一个有序数组，去除有序数组中的重复项，返回新数组的长度，要求O(1)的额外空间  </p><h2 id="2-解法"><a href="#2-解法" class="headerlink" title="2.解法"></a>2.解法</h2><p>统计数组中的重复元素，将其标记为INT_MIN，之后使用STL的remove删除被标记元素。 </p><p>remove函数并不改变vector的size，只是将删除的元素移到vector的最后。  </p><p>一开始看成需要一个新的vector,所以将后面被删除的元素pop,但题目中对于新数组的输出使用的是新的size，所以不必进行此操作。</p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><pre class="line-numbers language-c++"><code class="language-c++">class Solution {public:    int removeDuplicates(vector<int>& nums)     {        int ans = 0;        int curData = INT_MIN;        for(int i = 0;i<nums.size();i++)        {            if(nums[i]!=curData)            {                curData = nums[i];                ans++;                continue;            }            else            {                nums[i] = INT_MIN;                continue;            }        }        remove(nums.begin(), nums.end(), INT_MIN);        return ans;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
